# bot.py
import os
import json
import time
import random
import logging
import threading
from dotenv import load_dotenv
from flask import Flask
from io import BytesIO

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# -------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ TOKEN
# -------------------------
load_dotenv()
TOKEN = os.getenv("YOUR_BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è YOUR_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏.")

# -------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª logs.txt
# -------------------------
if not os.path.exists("logs.txt"):
    open("logs.txt", "w", encoding="utf-8").close()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs.txt", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# -------------------------
# Flask (–¥–ª—è Render)
# -------------------------
flask_app = Flask(__name__)

@flask_app.route("/")
def index():
    return "‚úÖ Telegram bot is running!"

# -------------------------
# –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö
# -------------------------
DATA_FILE = "data.json"

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {
            "users": {},
            "admins": [],
            "banned": [],
            "permissions": {},
            "message_count": 0,
            "admin_chat_enabled": False
        }

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(DATA, f, ensure_ascii=False, indent=2)

DATA = load_data()

# -------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã / —Å–æ—Å—Ç–æ—è–Ω–∏—è
# -------------------------
STATE_WAIT_ADMIN_USERNAME = "WAIT_ADMIN_USERNAME"
STATE_WAIT_REMOVE_ADMIN = "WAIT_REMOVE_ADMIN"
STATE_WAIT_PERMS_USERNAME = "WAIT_PERMS_USERNAME"
STATE_WAIT_MUTE = "WAIT_MUTE"
STATE_WAIT_IMPERSONATE = "WAIT_IMPERSONATE"
STATE_WAIT_BROADCAST = "WAIT_BROADCAST"
STATE_USER_SEND = "USER_SEND"
STATE_PRIVATE_REPLY = "PRIVATE_REPLY"

ALL_PERMS = ["broadcast", "impersonate", "manage_perms", "stats", "mute", "export", "admin_chat", "private_reply"]

# -------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -------------------------
def ensure_user_registered(user):
    uid = str(user.id)
    if uid not in DATA["users"]:
        anon = random.randint(1, 99999)
        DATA["users"][uid] = {
            "username": user.username if user.username else None,
            "anon": anon,
            "muted_until": 0
        }
        save_data()

def get_anon_display(uid):
    info = DATA["users"].get(str(uid))
    if not info:
        return "–ê–Ω–æ–Ω–∏–º"
    return f"–ê–Ω–æ–Ω–∏–º#{info['anon']}"

def is_banned_username(username):
    return username and username.startswith("@") and username in DATA["banned"]

def is_admin_username(username):
    return username and username.startswith("@") and username in DATA["admins"]

def check_permission(username, perm):
    perms = DATA["permissions"].get(username, {})
    return perms.get(perm, False)

def init_admin_if_none(admin_username):
    if admin_username not in DATA["admins"]:
        DATA["admins"].append(admin_username)
    if admin_username not in DATA["permissions"]:
        DATA["permissions"][admin_username] = {p: True for p in ALL_PERMS}
    save_data()

init_admin_if_none("@mellfreezy")

# -------------------------
# UI helpers
# -------------------------
def perms_to_keyboard_for_user(target_username):
    perms = DATA["permissions"].get(target_username, {p: False for p in ALL_PERMS})
    rows = []
    for p in ALL_PERMS:
        mark = "‚úÖ" if perms.get(p, False) else "‚ùå"
        rows.append([InlineKeyboardButton(f"{mark} {p}", callback_data=f"TOGGLE|{target_username}|{p}")])
    rows.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="ADMIN_PANEL")])
    return InlineKeyboardMarkup(rows)

def admin_panel_keyboard():
    kb = [
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="SHOW_USERS")],
        [InlineKeyboardButton("üßë‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data="SHOW_ADMINS")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="SHOW_STATS")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="ADD_ADMIN"),
         InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="REMOVE_ADMIN")],
        [InlineKeyboardButton("‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è", callback_data="SET_PERMS"),
         InlineKeyboardButton("‚è±Ô∏è –¢–∞–π–º-–∞—É—Ç / –ú—É—Ç", callback_data="MUTE_USER")],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="EXPORT_DATA"),
         InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="BROADCAST")],
        [InlineKeyboardButton("üßë‚Äçüí¨ –ü–∏—Å–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏", callback_data="IMPERSONATE"),
         InlineKeyboardButton("üí¨ –†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤", callback_data="TOGGLE_ADMIN_CHAT")],
        [InlineKeyboardButton("üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –õ–æ–≥–∏", callback_data="SAVE_LOGS")]
    ]
    return InlineKeyboardMarkup(kb)

# -------------------------
# –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
# -------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user_registered(user)
    kb = [
        [InlineKeyboardButton("üó®Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="USER_SEND")],
        [InlineKeyboardButton("üíñ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", url="https://t.me/mellfreezy_dons")]
    ]
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(kb))

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uname = f"@{update.effective_user.username}" if update.effective_user.username else None
    if not uname or uname not in DATA["admins"]:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel_keyboard())

async def send_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user_registered(user)
    uid = str(user.id)
    if DATA["users"][uid].get("muted_until", 0) > time.time():
        await update.message.reply_text("‚è±Ô∏è –í—ã –∑–∞–º—å—é—á–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    await update.message.reply_text("üó®Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∞–Ω–æ–Ω–∏–º–Ω–æ):")
    context.user_data["state"] = STATE_USER_SEND

# -------------------------
# CallbackQuery handler (–∫–Ω–æ–ø–∫–∏)
# -------------------------
async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user = query.from_user
    uname = f"@{user.username}" if user.username else None

    if data == "SAVE_LOGS":
        if not uname or uname not in DATA["admins"]:
            await query.edit_message_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        with open("logs.txt", "rb") as f:
            await query.message.reply_document(document=InputFile(f, filename="logs.txt"))
        await query.edit_message_text("üìù –õ–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        return

    # –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (ADMIN_PANEL, SHOW_USERS, SHOW_ADMINS, TOGGLE –∏ —Ç.–¥.)
    # –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é callback_query_handler

# -------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# -------------------------
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤, mute, broadcast –∏ —Ç.–¥.
    pass  # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø—Ä–∏–º–µ—Ä—É

# -------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------
def main():
    app_tg = ApplicationBuilder().token(TOKEN).build()

    app_tg.add_handler(CommandHandler("start", start))
    app_tg.add_handler(CommandHandler("admin", admin_command))
    app_tg.add_handler(CallbackQueryHandler(callback_query_handler))
    app_tg.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    threading.Thread(target=app_tg.run_polling).start()
    flask_app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

if __name__ == "__main__":
    main()
