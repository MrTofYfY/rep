import os
import json
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# ==========================================
#              –ù–ê–°–¢–†–û–ô–ö–ò
# ==========================================
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

BOT_TOKEN = os.getenv("TOKEN")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "mellfreezy")
HF_API_KEY = os.getenv("HF_API_KEY")

if not BOT_TOKEN or not HF_API_KEY:
    raise RuntimeError("‚ùå –í .env –Ω–µ —É–∫–∞–∑–∞–Ω TOKEN –∏–ª–∏ HF_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

ACCESS_FILE = "access.json"

# ==========================================
#              –î–û–°–¢–£–ü–´
# ==========================================
def load_access():
    if os.path.exists(ACCESS_FILE):
        with open(ACCESS_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return {ADMIN_USERNAME}

def save_access():
    with open(ACCESS_FILE, "w", encoding="utf-8") as f:
        json.dump(list(allowed_users), f, ensure_ascii=False, indent=2)

allowed_users = load_access()

def is_admin(username: str) -> bool:
    return username == ADMIN_USERNAME

def is_allowed(username: str) -> bool:
    return username in allowed_users

# ==========================================
#                FSM
# ==========================================
class ChatState(StatesGroup):
    waiting_for_text = State()

class AccessState(StatesGroup):
    give_username = State()
    remove_username = State()

# ==========================================
#             –ö–õ–ê–í–ò–ê–¢–£–†–´
# ==========================================
user_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üß† –ß–∞—Ç")]],
    resize_keyboard=True
)

admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üß† –ß–∞—Ç")],
        [KeyboardButton(text="üë§ –î–∞—Ç—å –¥–æ—Å—Ç—É–ø"), KeyboardButton(text="üö´ –ó–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø")]
    ],
    resize_keyboard=True
)

# ==========================================
#                /START
# ==========================================
@dp.message(CommandStart())
async def start(message: types.Message):
    username = message.from_user.username
    if not is_allowed(username):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    kb = admin_kb if is_admin(username) else user_kb
    await message.answer(
        f"üí° –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        f"–Ø ‚Äî <b>LuminAI</b>, —Ç–≤–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. ‚ú®\n\n"
        f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        parse_mode="HTML",
        reply_markup=kb
    )

# ==========================================
#              –ß–ê–¢ –†–ï–ñ–ò–ú
# ==========================================
@dp.message(F.text == "üß† –ß–∞—Ç")
async def start_chat(message: types.Message, state: FSMContext):
    username = message.from_user.username
    if not is_allowed(username):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üí¨ –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ LuminAI –æ—Ç–≤–µ—Ç–∏—Ç —Ç–µ–±–µ:")
    await state.set_state(ChatState.waiting_for_text)

@dp.message(ChatState.waiting_for_text)
async def handle_chat(message: types.Message, state: FSMContext):
    user_text = message.text.strip()
    await message.answer("‚ú® –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    try:
        async with aiohttp.ClientSession() as session:
            headers = {"Authorization": f"Bearer {HF_API_KEY}"}
            payload = {"inputs": user_text}
            async with session.post(
                "https://api-inference.huggingface.co/models/microsoft/DialoGPT-small",
                headers=headers,
                json=payload,
                timeout=60
            ) as resp:
                if resp.status != 200:
                    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {resp.status}")
                    return
                result = await resp.json()
                if isinstance(result, dict) and "error" in result:
                    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏: {result['error']}")
                elif isinstance(result, list) and "generated_text" in result[0]:
                    reply = result[0]["generated_text"]
                    await message.answer(reply)
                else:
                    await message.answer(str(result))
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
    await state.clear()

# ==========================================
#           –î–ê–¢–¨ / –£–î–ê–õ–ò–¢–¨ –î–û–°–¢–£–ü
# ==========================================
@dp.message(F.text == "üë§ –î–∞—Ç—å –¥–æ—Å—Ç—É–ø")
async def give_access_start(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.username):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
        return
    await message.answer("üîë –í–≤–µ–¥–∏ @username, –∫–æ–º—É –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø:")
    await state.set_state(AccessState.give_username)

@dp.message(AccessState.give_username)
async def give_access_finish(message: types.Message, state: FSMContext):
    username = message.text.replace("@", "").strip()
    allowed_users.add(username)
    save_access()
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø.")
    await state.clear()

@dp.message(F.text == "üö´ –ó–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø")
async def remove_access_start(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.username):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
        return
    await message.answer("‚ùó –í–≤–µ–¥–∏ @username, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø:")
    await state.set_state(AccessState.remove_username)

@dp.message(AccessState.remove_username)
async def remove_access_finish(message: types.Message, state: FSMContext):
    username = message.text.replace("@", "").strip()
    if username in allowed_users:
        allowed_users.remove(username)
        save_access()
        await message.answer(f"üö´ –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
    await state.clear()

# ==========================================
#               –ó–ê–ü–£–°–ö
# ==========================================
async def main():
    print("ü§ñ LuminAI –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –î–ª—è PythonAnywhere –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run
    import asyncio
    asyncio.run(main())
