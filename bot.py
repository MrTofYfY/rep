# main.py
import asyncio
import json
import logging
import os
from pathlib import Path

from dotenv import load_dotenv
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# -----------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ .env
# -----------------------
load_dotenv()  # –ø—Ä–æ—á–∏—Ç–∞–µ—Ç .env –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

BOT_TOKEN = os.getenv("TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "mellfreezy")

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω TOKEN –≤ .env ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏ TOKEN=—Ç—É—Ç_—Ç–æ–∫–µ–Ω")
if not OPENAI_API_KEY:
    # –º—ã —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –±–µ–∑ OpenAI (—Å–º. –Ω–∏–∂–µ), –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    print("WARN: OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenAI –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

# -----------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
# -----------------------
openai.api_key = OPENAI_API_KEY

# -----------------------
# –§–∞–π–ª—ã –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

ACCESS_FILE = Path("access.json")

def load_allowed():
    if ACCESS_FILE.exists():
        try:
            with ACCESS_FILE.open("r", encoding="utf-8") as f:
                data = json.load(f)
                return set(data.get("allowed", []))
        except Exception:
            return set([ADMIN_USERNAME])
    return set([ADMIN_USERNAME])

def save_allowed(allowed_set):
    data = {"allowed": list(allowed_set)}
    with ACCESS_FILE.open("w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

allowed_users = load_allowed()

# -----------------------
# –ö–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------
admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üß† ChatGPT"), KeyboardButton(text="üñºÔ∏è GPT Image")],
        [KeyboardButton(text="‚úÖ –î–∞—Ç—å –¥–æ—Å—Ç—É–ø"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø")]
    ],
    resize_keyboard=True
)

user_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üß† ChatGPT"), KeyboardButton(text="üñºÔ∏è GPT Image")]
    ],
    resize_keyboard=True
)

# -----------------------
# –£—Ç–∏–ª–∏—Ç—ã
# -----------------------
def is_allowed(username: str | None) -> bool:
    if username is None:
        return False
    return username in allowed_users

# -----------------------
# –•–µ–Ω–¥–ª–µ—Ä—ã
# -----------------------
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    username = message.from_user.username
    if not is_allowed(username):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    if username == ADMIN_USERNAME:
        await message.answer("üëë –ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω!", reply_markup=admin_kb)
    else:
        await message.answer("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π GPT –±–æ—Ç.", reply_markup=user_kb)

# –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "ChatGPT" ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å
@dp.message(lambda m: m.text == "üß† ChatGPT")
async def chatgpt_mode(message: types.Message):
    if not is_allowed(message.from_user.username):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è ChatGPT (—è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –≤ OpenAI).")
    # —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç universal_query

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
@dp.message(lambda m: m.text == "üñºÔ∏è GPT Image")
async def image_mode(message: types.Message):
    if not is_allowed(message.from_user.username):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üñåÔ∏è –û–ø–∏—à–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å (–∫–æ—Ä–æ—Ç–∫–æ).")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
@dp.message(lambda m: m.text in {"‚úÖ –î–∞—Ç—å –¥–æ—Å—Ç—É–ø", "‚ùå –£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø"})
async def access_control(message: types.Message):
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø–æ–º.")
        return

    if message.text == "‚úÖ –î–∞—Ç—å –¥–æ—Å—Ç—É–ø":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º (–±–µ–∑ @), –∫–æ—Ç–æ—Ä–æ–º—É –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø:")
        # —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç ‚Äî grant step
        dp.message.register(grant_access_step, lambda m: True)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º (–±–µ–∑ @), —É –∫–æ—Ç–æ—Ä–æ–≥–æ —É–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø:")
        dp.message.register(remove_access_step, lambda m: True)

async def grant_access_step(message: types.Message):
    # –æ–∂–∏–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç ‚Äî —é–∑–µ—Ä–Ω–µ–π–º –±–µ–∑ @
    username = message.text.strip().lstrip("@")
    if not username:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º.")
    else:
        allowed_users.add(username)
        save_allowed(allowed_users)
        await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")
    dp.message.unregister(grant_access_step)

async def remove_access_step(message: types.Message):
    username = message.text.strip().lstrip("@")
    if username in allowed_users:
        allowed_users.remove(username)
        save_allowed(allowed_users)
        await message.answer(f"‚ùå –î–æ—Å—Ç—É–ø —É–¥–∞–ª—ë–Ω —É @{username}")
    else:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
    dp.message.unregister(remove_access_step)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è: –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø,
# —Ä–µ—à–∞–µ–º, —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –≤ ChatGPT –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥–µ.
@dp.message()
async def universal_query(message: types.Message):
    username = message.from_user.username
    if not is_allowed(username):
        # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return

    text = message.text.strip()
    if not text:
        return

    # –†–µ—à–µ–Ω–∏–µ: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/img " ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ,
    # –∏–Ω–∞—á–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ ChatGPT.
    if text.startswith("/img "):
        prompt = text[len("/img "):].strip()
        if not OPENAI_API_KEY:
            await message.answer("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        await message.answer("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        try:
            resp = openai.images.generate(
                model="gpt-image-1",
                prompt=prompt,
                size="512x512"
            )
            # –û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ resp.data[0].url
            img_url = resp.data[0].url
            await message.answer_photo(photo=img_url, caption="–ì–æ—Ç–æ–≤–æ!")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    else:
        # ChatGPT
        if not OPENAI_API_KEY:
            await message.answer("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚Äî —á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        await message.answer("‚åõ –î—É–º–∞—é...")
        try:
            response = openai.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": text}]
            )
            reply = response.choices[0].message.content
            await message.answer(reply)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")

# -----------------------
# –ó–∞–ø—É—Å–∫
# -----------------------
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ .env –∑–∞–ø–æ–ª–Ω–µ–Ω –∏ .gitignore —Å–æ–¥–µ—Ä–∂–∏—Ç .env")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
