import os
import json
import asyncio
import aiohttp
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# ==========================================================
#                    –ù–ê–°–¢–†–û–ô–ö–ò –ò –§–ê–ô–õ–´
# ==========================================================
load_dotenv()
BOT_TOKEN = os.getenv("TOKEN")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "mellfreezy")
IMG_API_KEY = os.getenv("IMG_API_KEY")

if not BOT_TOKEN:
    raise RuntimeError("‚ùå –í .env –Ω–µ —É–∫–∞–∑–∞–Ω TOKEN")

ACCESS_FILE = "access.json"

def load_access():
    if os.path.exists(ACCESS_FILE):
        with open(ACCESS_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return {ADMIN_USERNAME}

def save_access():
    with open(ACCESS_FILE, "w", encoding="utf-8") as f:
        json.dump(list(allowed_users), f, ensure_ascii=False, indent=2)

allowed_users = load_access()

def is_admin(username: str) -> bool:
    return username == ADMIN_USERNAME

def is_allowed(username: str) -> bool:
    return username in allowed_users

# ==========================================================
#                       –°–û–°–¢–û–Ø–ù–ò–Ø FSM
# ==========================================================
class ChatState(StatesGroup):
    waiting_for_text = State()

class ImageState(StatesGroup):
    waiting_for_prompt = State()

class AccessState(StatesGroup):
    give_username = State()
    remove_username = State()

# ==========================================================
#                      –ö–õ–ê–í–ò–ê–¢–£–†–´
# ==========================================================
user_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üß† Chat"), KeyboardButton(text="üñºÔ∏è Image")]
    ],
    resize_keyboard=True
)

admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üß† Chat"), KeyboardButton(text="üñºÔ∏è Image")],
        [KeyboardButton(text="üë§ –î–∞—Ç—å –¥–æ—Å—Ç—É–ø"), KeyboardButton(text="üö´ –ó–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø")]
    ],
    resize_keyboard=True
)

# ==========================================================
#                        –ë–û–¢
# ==========================================================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ==========================================================
#                        /start
# ==========================================================
@dp.message(CommandStart())
async def start(message: types.Message):
    username = message.from_user.username
    if not is_allowed(username):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    kb = admin_kb if is_admin(username) else user_kb
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!", reply_markup=kb)

# ==========================================================
#                    –ê–î–ú–ò–ù - –î–û–°–¢–£–ü
# ==========================================================
@dp.message(F.text == "üë§ –î–∞—Ç—å –¥–æ—Å—Ç—É–ø")
async def give_access_start(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.username):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
        return
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º (–±–µ–∑ @), –∫–æ–º—É –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø:")
    await state.set_state(AccessState.give_username)

@dp.message(AccessState.give_username)
async def give_access_finish(message: types.Message, state: FSMContext):
    username = message.text.strip().lstrip("@")
    await state.clear()
    if username in allowed_users:
        await message.answer(f"‚ö†Ô∏è @{username} —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø.")
    else:
        allowed_users.add(username)
        save_access()
        await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –¥–ª—è @{username} –≤—ã–¥–∞–Ω!")

@dp.message(F.text == "üö´ –ó–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø")
async def remove_access_start(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.username):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
        return
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º (–±–µ–∑ @), —É –∫–æ–≥–æ –∑–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø:")
    await state.set_state(AccessState.remove_username)

@dp.message(AccessState.remove_username)
async def remove_access_finish(message: types.Message, state: FSMContext):
    username = message.text.strip().lstrip("@")
    await state.clear()

    if username == ADMIN_USERNAME:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ –∞–¥–º–∏–Ω–∞!")
        return

    if username in allowed_users:
        allowed_users.remove(username)
        save_access()
        await message.answer(f"üö´ –î–æ—Å—Ç—É–ø @{username} —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# ==========================================================
#                       CHAT
# ==========================================================
@dp.message(F.text == "üß† Chat")
async def chat_start(message: types.Message, state: FSMContext):
    if not is_allowed(message.from_user.username):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üí¨ –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:")
    await state.set_state(ChatState.waiting_for_text)

@dp.message(ChatState.waiting_for_text)
async def chat_process(message: types.Message, state: FSMContext):
    await state.clear()
    prompt = message.text.strip()
    await message.answer("‚åõ –î—É–º–∞—é...")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://api.deepai.org/api/text-generator",
                data={"text": prompt},
                headers={"api-key": IMG_API_KEY}
            ) as resp:
                data = await resp.json()
                output = data.get("output", "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞.")
                await message.answer(output)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API: {e}")

# ==========================================================
#                       IMAGE
# ==========================================================
@dp.message(F.text == "üñºÔ∏è Image")
async def image_start(message: types.Message, state: FSMContext):
    if not is_allowed(message.from_user.username):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üé® –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
    await state.set_state(ImageState.waiting_for_prompt)

@dp.message(ImageState.waiting_for_prompt)
async def image_process(message: types.Message, state: FSMContext):
    await state.clear()
    prompt = message.text.strip()
    await message.answer("üñåÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://api.deepai.org/api/text2img",
                data={"text": prompt},
                headers={"api-key": IMG_API_KEY},
                timeout=120
            ) as resp:
                data = await resp.json()
                img_url = data.get("output_url")
                if img_url:
                    await message.answer_photo(photo=img_url)
                else:
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API: {e}")

# ==========================================================
#                   –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–ß–ï–ì–û
# ==========================================================
@dp.message()
async def fallback(message: types.Message):
    username = message.from_user.username
    if not is_allowed(username):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    kb = admin_kb if is_admin(username) else user_kb
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üëá", reply_markup=kb)

# ==========================================================
#                       –ó–ê–ü–£–°–ö
# ==========================================================
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
