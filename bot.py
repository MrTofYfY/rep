import os
import tempfile
import subprocess
import shutil
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from PIL import Image
from dotenv import load_dotenv
import pyzipper
import rarfile

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env ===
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# === –§–æ—Ä–º–∞—Ç—ã ===
FORMAT_OPTIONS = {
    'image': ['jpg', 'jpeg', 'png', 'webp', 'svg'],
    'video': ['mp4', 'avi', 'webm', 'mov'],
    'audio': ['mp3', 'wav', 'ogg', 'aac', 'flac', 'm4a'],
    'document': ['pdf', 'txt', 'docx'],
    'archive': ['zip', 'rar']
}

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ===
user_file_store = {}

# === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ ===
def detect_type(filename: str):
    ext = filename.split('.')[-1].lower()
    if ext in ['jpg', 'jpeg', 'png', 'webp', 'svg']:
        return 'image'
    elif ext in ['mp4', 'avi', 'mov', 'webm']:
        return 'video'
    elif ext in ['mp3', 'wav', 'ogg', 'aac', 'flac', 'm4a']:
        return 'audio'
    elif ext in ['pdf', 'docx', 'txt']:
        return 'document'
    elif ext in ['zip', 'rar']:
        return 'archive'
    else:
        return 'unknown'

# === –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ ffmpeg ===
async def convert_with_ffmpeg(input_path, output_path):
    try:
        subprocess.run(
            ["ffmpeg", "-y", "-i", input_path, output_path],
            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
        )
        return os.path.exists(output_path)
    except Exception:
        return False

# === –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===
def convert_image(input_path, output_format):
    try:
        if output_format.lower() == 'svg':
            out_path = f"{input_path}.svg"
            shutil.copy(input_path, out_path)
            return out_path
        out_path = f"{input_path}.{output_format}"
        img = Image.open(input_path)
        img.save(out_path)
        return out_path
    except Exception:
        return None

# === –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—Ä—Ö–∏–≤–æ–≤ ===
async def convert_archive(input_path, target_fmt):
    out_path = f"{input_path}.{target_fmt}"
    try:
        if target_fmt == 'zip':
            with pyzipper.AESZipFile(out_path, 'w') as zipf:
                if input_path.endswith('.rar'):
                    with rarfile.RarFile(input_path) as rf:
                        for f in rf.infolist():
                            zipf.writestr(f.filename, rf.read(f))
                else:
                    shutil.copy(input_path, out_path)
        elif target_fmt == 'rar':
            shutil.copy(input_path, out_path)
        return out_path if os.path.exists(out_path) else None
    except Exception as e:
        print(e)
        return None

# === –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ ===
async def send_type_menu(chat_id):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="type_image"))
    markup.add(InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="type_video"))
    markup.add(InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ", callback_data="type_audio"))
    markup.add(InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="type_document"))
    markup.add(InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤", callback_data="type_archive"))
    await bot.send_message(chat_id, "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", reply_markup=markup)

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message_handler(commands=['start', 'help'])
async def start(msg: types.Message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="type_image"))
    markup.add(InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="type_video"))
    markup.add(InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ", callback_data="type_audio"))
    markup.add(InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="type_document"))
    markup.add(InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤", callback_data="type_archive"))
    await msg.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä.\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=markup)

# === –°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ /convert (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ –ª–∏—á–∫–µ, –∏ –≤ –≥—Ä—É–ø–ø–µ) ===
@dp.message_handler(commands=['convert'])
async def convert_command(msg: types.Message):
    await send_type_menu(msg.chat.id)

# === –í—ã–±–æ—Ä —Ç–∏–ø–∞ ===
@dp.callback_query_handler(lambda c: c.data.startswith("type_"))
async def choose_file_type(callback_query: types.CallbackQuery):
    ftype = callback_query.data.replace("type_", "")
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ({ftype})")
    user_file_store[callback_query.from_user.id] = {'expected_type': ftype}

# === –ü—Ä–∏—ë–º —Ñ–∞–π–ª–∞ ===
@dp.message_handler(content_types=['document', 'photo', 'video', 'audio'])
async def receive_file(msg: types.Message):
    user_id = msg.from_user.id
    file_info = None
    file_name = "file"

    if msg.document:
        file_info = await bot.get_file(msg.document.file_id)
        file_name = msg.document.file_name
    elif msg.photo:
        file_info = await bot.get_file(msg.photo[-1].file_id)
        file_name = "photo.jpg"
    elif msg.video:
        file_info = await bot.get_file(msg.video.file_id)
        file_name = "video.mp4"
    elif msg.audio:
        file_info = await bot.get_file(msg.audio.file_id)
        file_name = msg.audio.file_name or "audio.mp3"
    else:
        await msg.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
        return

    ftype = detect_type(file_name)
    temp_path = tempfile.mktemp()
    await bot.download_file(file_info.file_path, temp_path)
    user_file_store[user_id] = {'path': temp_path, 'type': ftype}

    markup = InlineKeyboardMarkup(row_width=3)
    for fmt in FORMAT_OPTIONS.get(ftype, []):
        markup.add(InlineKeyboardButton(f"‚Üí {fmt}", callback_data=f"convert_{fmt}"))

    await msg.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", reply_markup=markup)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ===
@dp.callback_query_handler(lambda c: c.data.startswith("convert_"))
async def convert_file_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    target_fmt = callback_query.data.replace("convert_", "")
    await bot.answer_callback_query(callback_query.id, "‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é...")

    if user_id not in user_file_store or 'path' not in user_file_store[user_id]:
        await bot.send_message(user_id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å –∑–∞–Ω–æ–≤–æ.")
        return

    temp_data = user_file_store[user_id]
    input_path = temp_data['path']
    ftype = temp_data['type']
    out_path = f"{input_path}.{target_fmt}"
    success = False

    if ftype == 'image':
        converted = convert_image(input_path, target_fmt)
        success = converted is not None
        if success:
            out_path = converted
    elif ftype == 'archive':
        converted = await convert_archive(input_path, target_fmt)
        success = converted is not None
        if success:
            out_path = converted
    else:
        success = await convert_with_ffmpeg(input_path, out_path)

    if success and os.path.exists(out_path):
        await bot.send_document(user_id, open(out_path, 'rb'))
        await bot.send_message(user_id, "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ üòî")

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    for p in [input_path, out_path]:
        try:
            if os.path.exists(p):
                os.remove(p)
        except:
            pass

    user_file_store.pop(user_id, None)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)
